@page "/"
@using PinewoodProjectBackend.Models.Enums
@using PinewoodProjectFrontend.Models
@attribute [StreamRendering]
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

<PageTitle>Pinewood Customer Database</PageTitle>

<h1>Customers</h1>

<p>Below is a complete list of customer data retrieved from the database.</p>

@if (profiles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer ID     <Button @onclick="() => SortTableByID()">↕</Button></th>
                <th>Date Registered     <Button @onclick="() => SortTableByDate()">↕</Button></th>
                <th>Customer Product Type     <Button @onclick="() => SortTableByProduct()">↕</Button></th>
                <th>Recieves Marketing Emails     <Button @onclick="() => SortTableByMarketing()">↕</Button></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var profile in profiles)
            {
                <tr>
                    <td>@profile.CustomerID</td>
                    <td>@profile.DateRegistered.ToShortDateString()</td>
                    <td>@profile.ProductType</td>
                    <td>@profile.EnableMarketing</td>
                    <td><Button @onclick="() => DeleteRecordAndRefresh(profile.CustomerID)">Delete</Button><Button @onclick="() => UpdateRecordAndRefresh(profile.CustomerID)">Update</Button></td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Add/Update Profile</h3>
    <p>Input values into the form below, and click "Create Customer Record" to save the data to the database. You may also click "Update" next to an existing record to overwrite that data instead.</p>
    <hr />
    <div class="form-group row">
        Customer ID
        <div class="col-sm-2">
            <InputNumber id="customerId" class="form-control"
                @bind-Value="profile.CustomerID" />

        </div>
    </div>
    <div class="form-group row">
        Date Registered
        <div class="col-sm-2">
            <InputDate id="dateRegistered" class="form-control"
            @bind-Value="profile.DateRegistered" />
        </div>
    </div>
    <div class="form-group row">
        Product Type
        <div class="col-sm-2">
            <InputSelect id="productType" class="form-control"
            @bind-Value="profile.ProductType">
            @foreach (var product in Enum.GetValues(typeof(ProductType)))
            {
                <option value="@product">@product</option>
            }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        Recieve Marketing Emails
        <div class="col-sm-1">
            <InputCheckbox id="enableMarketing"
            @bind-Value="profile.EnableMarketing" />
        </div>
    </div>
    <br />
    <Button @onclick="() => CreateRecordAndRefresh()">Create Customer Record</Button>

}

@code {
    // Objects for form bindings
    private CustomerProfile[] profiles;
    private CustomerProfile profile = new CustomerProfile();

    // HTTP Client for API connection
    private HttpClient client;

    protected override async Task OnInitializedAsync()
    {
        client = ClientFactory.CreateClient();

        if (client != null)
        {
            await LoadTableData();
        }
        else
        {
            throw new Exception("PP005: Failed to create HTTP Client.");
        }
    }

    private void SortTableByID()
    {
        // Ascending order sorting by CustomerID
        profiles = profiles.OrderBy(x => x.CustomerID).ToArray();
    }

    private void SortTableByDate()
    {
        // Ascending order sorting by Date Registered
        profiles = profiles.OrderBy(x => x.DateRegistered).ToArray();
    }

    private void SortTableByProduct()
    {
        // Ascending order sorting by Product type name
        profiles = profiles.OrderBy(x => x.ProductType).ToArray();
    }

    private void SortTableByMarketing()
    {
        // Sorting by enabled/disabled marketing option
        profiles = profiles.OrderBy(x => x.EnableMarketing).ToArray();
    }

    private async Task LoadTableData()
    {
        // Retrieves the customer profile data from a backend API call for rendering
        Thread.Sleep(100);

        var response = await HTTPHelper.LoadTableData(client);

        profiles = response.ToArray();
    }

    private async Task DeleteRecordAndRefresh(int id)
    {
        // Deletes the profile with the specified ID from the database
        HTTPHelper.DeleteRecord(client, id);

        await LoadTableData();
    }

    private async Task CreateRecordAndRefresh()
    {
        // Adds the record with the specified ID to the database
        HTTPHelper.AddRecord(client, profile);

        await LoadTableData();
    }

    private async Task UpdateRecordAndRefresh(int id)
    {
        // Updates the existing record with the specified originalID
        profile.OriginalID = id;

        HTTPHelper.UpdateRecord(client, profile);

        // Clears originalID after usage to avoid value resubmission
        profile.OriginalID = null;

        await LoadTableData();
    }
}
